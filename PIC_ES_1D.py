# Autogenerated with SMOP version 
# main.py PIC_ES_1D_full.m
from __future__ import division
import math
import numpy as np
import scipy.sparse.linalg
import matplotlib.pyplot as plt
from scipy.sparse import spdiags
from scipy.sparse.linalg import spsolve

plt.close('all')

L=2.0 * np.pi
DT=0.5
NT=500
NTOUT=25
NG=32
N=10000
WP=1
QM=- 1
V0=0.2
VT=0.0
XP1=0.001
V1=0
mode=1
Q=WP ** 2 / (QM * N / L)
rho_back=- Q * N / L
dx=L / NG
Eg_fft=[]
temperature=[]
W_k=[]
W_E=[]
P=[]
position=[]
xp=np.linspace(0,L - L / N,N)
vp=VT * np.random.randn(N)
for i in np.arange(0,N-1):
    vp[i] = vp[i] + V0*(1-2*np.mod(i,2))
xp=xp + XP1 * np.sin(2 * np.pi * xp / L * mode)
out=np.where(xp < 0)
xp[out]=xp[out] + L
out=np.where(xp >= L)
xp[out]=xp[out] - L
Poisson = spdiags(np.array(np.ones((1,NG-1))),np.array([-1]),NG-1,NG-1) + spdiags(np.array(np.ones((1,NG-1))),np.array([1]),NG-1,NG-1) + spdiags(np.array(-2* np.ones((1,NG-1))),np.array([0]),NG-1,NG-1)

f, axarr = plt.subplots(3, sharex=False)
 
for it in np.arange(1,NT).reshape(-1):
    xp=xp + vp*DT 
    out=np.where(xp < 0)
    xp[out]=xp[out] + L
    out=np.where(xp >= L)
    xp[out]=xp[out] - L
    g1=np.floor(xp / dx - 0.5) + 1
    fraz1=1 - np.abs(xp / dx - g1 + 0.5)
    fraz2=1 - fraz1
    out=np.where(g1 < 1)
    g1[out]=g1[out] + NG
    g2=g1+1
    out=np.where(g2 > NG)
    g2[out]=g2[out] - NG
    rho=np.zeros(NG)
    for k in np.arange(0,N):
     rho[int(g1[k]-1)]=rho[int(g1[k]-1)] + fraz1[k] * (Q / dx)
     rho[int(g2[k]-1)]=rho[int(g2[k]-1)] + fraz2[k] * (Q / dx)
    rho=rho + rho_back
    Phi=spsolve(Poisson,(- rho[0:NG-1] * dx ** 2))
    Phi=np.concatenate([Phi, [0]])
    Eg = np.zeros(NG+2)
    Eg[1] = -(Phi[1] - Phi[NG-1])/ (2.0*dx)
    Eg[2:NG] = -(Phi[2:NG] - Phi[0:NG-2])/ (2.0*dx)
    Eg[NG] = -(Phi[0] - Phi[NG-2])/ (2.0*dx)
    Eg[0] = Eg[NG]
    Eg[NG+1]=Eg[1]
    Ep=np.zeros(N)
    for k in np.arange(0,N):
        Ep[k]=fraz1[k] * Eg[int(g1[k])]  + fraz2[k] * Eg[int(g2[k])]
    vp=vp + QM * Ep * DT
    
